// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 10.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace C60.OrchestratorReference
{
    using System;
    
    
    #line 1 "C:\Projects\OrchestratorReference\OrchestratorReference\OrchestratorReferenceTemplate.tt"
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "10.0.0.0")]
    public partial class OrchestratorReferenceTemplate : OrchestratorReferenceTemplateBase
    {
        public virtual string TransformText()
        {
            this.Write(@"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.530
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ");
            
            #line 12 "C:\Projects\OrchestratorReference\OrchestratorReference\OrchestratorReferenceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.Namespace));
            
            #line default
            #line hidden
            this.Write(@"
{
    using System;
    using System.Collections.Generic;
    using System.Net;
    using System.Threading;
    using System.Threading.Tasks;
    using C60.OrchestratorReference;
    using C60.OrchestratorReference.OrchestratorServiceReference;

    [System.Diagnostics.DebuggerStepThroughAttribute]
    [System.CodeDom.Compiler.GeneratedCodeAttribute(""System.Runtime.Serialization"", ""4.0.0.0"")]
    public class ");
            
            #line 24 "C:\Projects\OrchestratorReference\OrchestratorReference\OrchestratorReferenceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ClassName));
            
            #line default
            #line hidden
            this.Write(@"
    {
        private static OrchestratorProvider orchestratorProvider;

        /// <summary>
        /// Initializes a new instance of the OrchestratorReference class.
        /// </summary>
        /// <param name=""serviceUri"">Overwrite the default server name/port from the original template</param>
        public ");
            
            #line 32 "C:\Projects\OrchestratorReference\OrchestratorReference\OrchestratorReferenceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ClassName));
            
            #line default
            #line hidden
            this.Write("(Uri serviceUri)\r\n        {\r\n            orchestratorProvider = new OrchestratorP" +
                    "rovider(serviceUri);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Initialize" +
                    "s a new instance of the OrchestratorReference class that references the ");
            
            #line 38 "C:\Projects\OrchestratorReference\OrchestratorReference\OrchestratorReferenceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.OrchestratorWebServer));
            
            #line default
            #line hidden
            this.Write(" server\r\n        /// </summary>\r\n        public ");
            
            #line 40 "C:\Projects\OrchestratorReference\OrchestratorReference\OrchestratorReferenceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ClassName));
            
            #line default
            #line hidden
            this.Write("()\r\n        {\r\n            orchestratorProvider = new OrchestratorProvider(bool.P" +
                    "arse(\"");
            
            #line 42 "C:\Projects\OrchestratorReference\OrchestratorReference\OrchestratorReferenceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.UseSSL));
            
            #line default
            #line hidden
            this.Write("\"), \"");
            
            #line 42 "C:\Projects\OrchestratorReference\OrchestratorReference\OrchestratorReferenceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.OrchestratorWebServer));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 42 "C:\Projects\OrchestratorReference\OrchestratorReference\OrchestratorReferenceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.Port));
            
            #line default
            #line hidden
            this.Write(");\r\n        }\r\n\r\n        /// <summary>\r\n        /// Gets or sets the credential t" +
                    "o use when accessing the orchestrator service.\r\n        /// </summary>\r\n        " +
                    "public ICredentials OrchestratorServiceCredentials \r\n        {\r\n            get\r" +
                    "\n            {\r\n                return orchestratorProvider.OrchestratorContext." +
                    "Credentials;\r\n            }\r\n            set\r\n            {\r\n                if " +
                    "(value != null)\r\n                {\r\n                    orchestratorProvider.Orc" +
                    "hestratorContext.Credentials = value;\r\n                }\r\n            }\r\n       " +
                    " }\r\n\r\n        /// <summary>\r\n        /// In case of using, on runtime, a differe" +
                    "nt orchestrator server, this method enables replacing all the folders that start" +
                    " with specific prefix to a different one.\r\n        /// </summary>\r\n        /// <" +
                    "param name=\"originalPrefix\">Original folder prefix</param>\r\n        /// <param n" +
                    "ame=\"newPrefix\">Replace with this prefix</param>\r\n        public void AddReplace" +
                    "FolderPrefix(string originalPrefix, string newPrefix)\r\n        {\r\n            or" +
                    "chestratorProvider.ReplaceFolderPrefix.Add(originalPrefix, newPrefix);\r\n        " +
                    "}\r\n\r\n        /// <summary>\r\n        /// Returns an OrchestratorContext object fo" +
                    "r the current orchestrator web services\r\n        /// </summary>\r\n        /// <re" +
                    "turns>New OrchestratorContext</returns>\r\n        public OrchestratorContext Crea" +
                    "teOrchestratorContext()\r\n        {\r\n            return \torchestratorProvider.Cre" +
                    "ateOrchestratorContext();\r\n        }\r\n\r\n        /// <summary>\r\n        /// Wait " +
                    "till the job complete and return runbook’s out parameters.\r\n        /// </summar" +
                    "y>\r\n        /// <param name=\"jobId\">Job Guid that returned from the runbook’s ex" +
                    "ecuting method.</param>\r\n        /// <returns>Name Value dictionary</returns>\r\n " +
                    "       public Dictionary<string, string> GetJobResult(Guid jobId)\r\n        {\r\n  " +
                    "          return orchestratorProvider.GetJobResult(jobId);\r\n        }\r\n\r\n       " +
                    " /// <summary>\r\n        /// Wait till the job complete and return runbook’s out " +
                    "parameters.\r\n        /// </summary>\r\n        /// <param name=\"jobId\"></param>\r\n " +
                    "       /// <param name=\"delayBetweenResultCheckSeconds\">Frequency of checking fo" +
                    "r job completion</param>\r\n        /// <param name=\"timeoutSeconds\">Timeout waiti" +
                    "ng for job completion</param>\r\n        /// <param name=\"cancellationToken\">Cance" +
                    "llation Token</param>\r\n        /// <returns>Name Value dictionary</returns>\r\n   " +
                    "     public Dictionary<string, string> GetJobResult(Guid jobId, int delayBetween" +
                    "ResultCheckSeconds, int timeoutSeconds, CancellationToken cancellationToken)\r\n  " +
                    "      {\r\n            return orchestratorProvider.GetJobResult(jobId, delayBetwee" +
                    "nResultCheckSeconds, timeoutSeconds, cancellationToken);\r\n        }\r\n        \r\n " +
                    "       /// <summary>\r\n        /// Return Task that wait till the job complete.\r\n" +
                    "        /// </summary>\r\n        /// <param name=\"jobId\">Job Guid that returned f" +
                    "rom the runbook’s executing method.</param>\r\n        /// <returns>Task of Name V" +
                    "alue dictionary</returns>\r\n        public Task<Dictionary<string, string>> GetJo" +
                    "bResultAsync(Guid jobId)\r\n        {\r\n            return orchestratorProvider.Get" +
                    "JobResultAsync(jobId);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Return T" +
                    "ask that wait till the job complete.\r\n        /// </summary>\r\n        /// <param" +
                    " name=\"jobId\">Job Guid that returned from the runbook’s executing method.</param" +
                    ">\r\n        /// <param name=\"cancellationToken\">Cancellation Token</param>\r\n     " +
                    "   /// <returns>Task of Name Value dictionary</returns>\r\n        public Task<Dic" +
                    "tionary<string, string>> GetJobResultAsync(Guid jobId, CancellationToken cancell" +
                    "ationToken)\r\n        {\r\n            return orchestratorProvider.GetJobResultAsyn" +
                    "c(jobId, cancellationToken);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Re" +
                    "turn Task that wait till the job complete.\r\n        /// </summary>\r\n        /// " +
                    "<param name=\"jobId\">Job Guid that returned from the runbook’s executing method.<" +
                    "/param>\r\n        /// <param name=\"delayBetweenResultCheckSeconds\">Frequency of c" +
                    "hecking for job completion</param>\r\n        /// <param name=\"timeoutSeconds\">Tim" +
                    "eout waiting for job completion</param>\r\n        /// <param name=\"cancellationTo" +
                    "ken\">Cancellation Token</param>\r\n        /// <returns>Task of Name Value diction" +
                    "ary</returns>\r\n        public Task<Dictionary<string, string>> GetJobResultAsync" +
                    "(Guid jobId, int delayBetweenResultCheckSeconds, int timeoutSeconds, Cancellatio" +
                    "nToken cancellationToken)\r\n        {\r\n            return orchestratorProvider.Ge" +
                    "tJobResultAsync(jobId, delayBetweenResultCheckSeconds, timeoutSeconds, cancellat" +
                    "ionToken);\r\n        }\r\n");
            
            #line 138 "C:\Projects\OrchestratorReference\OrchestratorReference\OrchestratorReferenceTemplate.tt"

    this.WriteFolderClass();

            
            #line default
            #line hidden
            this.Write("    }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "10.0.0.0")]
    public class OrchestratorReferenceTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
